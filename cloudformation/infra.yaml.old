AWSTemplateFormatVersion: '2010-09-09'

Description: Create and configure core infrastructure for running Front/Back/Database

# Parameters:
#   InternetGateway:
#     Description: The Internet Gateway to use for the Load Balancer
#     Type: AWS::EC2::InternetGateway

Resources:

  ######################
  # ECS/ECR definitions
  ######################

  # ECS Cluster configuration
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterName: !Sub '${AWS::StackName}-ecs-cluster'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      Tags:
        - Key: 'ecs:cluster:createdFrom'
          Value: ecs-console-v2

  # # Frontend images Registry
  EcrFrontend:
    Type: AWS::ECR::Repository
    # UpdateReplacePolicy: Retain
    # DeletionPolicy: Retain
    Properties:
      RepositoryName: !Sub '${AWS::StackName}-frontend'
      Tags:
        - Key: Name
          Value: ECR Repository

  # Backend images Registry
  EcrBackend:
    Type: AWS::ECR::Repository
    # UpdateReplacePolicy: Retain
    # DeletionPolicy: Retain
    Properties:
      RepositoryName: !Sub '${AWS::StackName}-backend'
      Tags:
        - Key: Name
          Value: ECR Repository

  ############################
  # Load Balancer definitions
  ############################

  # Load Balancer configuration
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LbSecurityGroup
      Subnets:
        - !Ref LbSubnet1
        - !Ref LbSubnet2
      Type: application
      LoadBalancerAttributes:
        - Key: "access_logs.s3.enabled"
          Value: "false"
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "routing.http2.enabled"
          Value: "true"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"

  # Load Balancer HTTP 80 port listener
  LbFrontendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "forward"
          Order: 1
          TargetGroupArn: !Ref FrontendTargetGroup

  # Load Balancer HTTP 3000 port listener
  LbBackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 3000
      Protocol: HTTP
      DefaultActions:
        - Type: "forward"
          Order: 1
          TargetGroupArn: !Ref BackendTargetGroup

  # Load Balancer Frontend Target Group
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref LbVPC
      Port: 80
      TargetType: ip
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      Matcher:
        HttpCode: "200"
      TargetGroupAttributes:
        - Key: "stickiness.enabled"
          Value: "false"
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - Key: "stickiness.type"
          Value: "lb_cookie"
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-frontend

  # Load Balancer Backend Target Group
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref LbVPC
      Port: 3000
      TargetType: ip
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /ping
      Matcher:
        HttpCode: "200"
      TargetGroupAttributes:
        - Key: "stickiness.enabled"
          Value: "false"
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - Key: "stickiness.type"
          Value: "lb_cookie"
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-backend

  ######################
  # Network definitions
  ######################

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ig

  # Attach the VPC to the Internet Gateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LbVPC
      InternetGatewayId: !Ref InternetGateway

  # Load Balancer VPC
  LbVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  # Load Balancer Subnet 1
  LbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref LbVPC
      CidrBlock: 10.1.10.0/24
      MapPublicIpOnLaunch: true # TODO DISABLE
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-1

  # Load Balancer Subnet 2
  LbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LbVPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true # TODO DISABLE
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-2

  # Security Group to allow ports
  LbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP(s) access on port 80 and 3000
      VpcId: !Ref LbVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AlbSecurityGroup

  ######################
  # Network Routing
  ######################

  # Routing Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LbVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-router-table

  # Public Route definition
  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Subnet Route Association
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LbSubnet1
      RouteTableId: !Ref RouteTable

  # Subnet Route Association
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LbSubnet2
      RouteTableId: !Ref RouteTable

  # # NAT Gateway
  # NatGateway:
  #   Type: AWS::EC2::NatGateway
  #   DependsOn: NatPublicIP
  #   Properties:
  #     SubnetId: !Ref PublicSubnet1
  #     AllocationId: !GetAtt NatPublicIP.AllocationId

  # # ELASTIC IP
  # NatPublicIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: PubPrivateVPC
  #   Properties:
  #     Domain: vpc

  ##################################
  # Describe Application containers
  ##################################

  EcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-execution-role'
      Path: /
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
              Action:
                - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  # - ecr:GetAuthorizationToken
                  # - ecr:BatchCheckLayerAvailability
                  # - ecr:GetDownloadUrlForLayer
                  # - ecr:BatchGetImage
                  # - logs:CreateLogStream
                  # - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: '*'

  EcsFrontendService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancer
    Properties:
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref EcsFrontendTaskDefinition
      ServiceName: frontend
      SchedulingStrategy: REPLICA
      DesiredCount: 2
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn: !Ref FrontendTargetGroup
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref LbSecurityGroup
          Subnets:
            - !Ref LbSubnet1
            - !Ref LbSubnet2

  EcsBackendService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancer
    Properties:
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref EcsBackendTaskDefinition
      ServiceName: backend
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 3000
          TargetGroupArn: !Ref BackendTargetGroup
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref LbSecurityGroup
          Subnets:
            - !Ref LbSubnet1
            - !Ref LbSubnet2

  # Define the Frontend container running environment
  EcsFrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256" # 0.25 cpu unit
      Memory: '1024' # 1GB
      NetworkMode: awsvpc
      Family: !Sub "${AWS::StackName}-frontend"
      ExecutionRoleArn: !GetAtt EcsExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: frontend
          Image: !Join
            - ":"
            - - !GetAtt EcrFrontend.RepositoryUri
              - latest
          Essential: true
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "frontend"
              awslogs-region: "us-east-1"
              awslogs-create-group: "true"
              awslogs-stream-prefix: "frontend"

  # Define the Backend container running environment (image, CPU, architecture,..)
  EcsBackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "1024" # 1 cpu unit
      Memory: '2048' # 2GB
      NetworkMode: awsvpc
      Family: !Sub "${AWS::StackName}-backend"
      ExecutionRoleArn: !GetAtt EcsExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: backend
          Essential: true
          Image: !Join
            - ":"
            - - !GetAtt EcrBackend.RepositoryUri
              - latest
          PortMappings:
            - HostPort: 3000
              ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: DATABASE_HOST
              Value: !GetAtt RDSPostgres.Endpoint.Address
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "backend"
              awslogs-region: "us-east-1"
              awslogs-create-group: "true"
              awslogs-stream-prefix: "backend"


  ##################################
  # Application services deployment
  ##################################

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: Database subnet to be avaliable from Backend
      SubnetIds:
        - !Ref LbSubnet1
        - !Ref LbSubnet2

  # PostgreSQL Database
  RDSPostgres:
    Type: AWS::RDS::DBInstance
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      AllocatedStorage: "25"
      DBInstanceIdentifier: !Sub "${AWS::StackName}-database"
      DBInstanceClass: db.t3.small
      MultiAZ: true
      VPCSecurityGroups:
        - !Ref LbSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: postgres
      PubliclyAccessible: true # TODO DISABLE
      MasterUsername: postgres
      MasterUserPassword: lpsselcelc
      DBName: example

Outputs:

  LoadBalancerUrl:
    Description: The public URL
    Value: !GetAtt LoadBalancer.DNSName

  FrontendEcrUri:
    Description: Frontend ECR URI
    Value: !GetAtt EcrFrontend.RepositoryUri

  BackendEcrUri:
    Description: Backend ECR URI
    Value: !GetAtt EcrBackend.RepositoryUri

  DatabaseUrl:
    Description: Database URL
    Value: !GetAtt RDSPostgres.Endpoint.Address